{"version":3,"sources":["separatorCommas.js"],"names":[],"mappings":";;;;;AAAO,IAAM,4CAAkB,SAAlB,eAAkB,CAAC,MAAD,EAAY;AACzC,MAAI,SAAS,SAAS,EAAtB,CADyC,CACf;;AAE1B,WAAS,OAAO,OAAP,CAAgB,wBAAhB,EAA0C,EAA1C,CAAT,CAHyC,CAGe;;AAExD,MAAI,SAAS,2BAAb,CALyC,CAKC;;AAE1C,SAAQ,OAAO,IAAP,CAAa,MAAb,CAAR;AAAgC,aAAS,OAAO,OAAP,CAAgB,MAAhB,EAAwB,OAAO,GAAP,GAAa,IAAb,GAAoB,IAA5C,CAAT;AAAhC,GAPyC,CAOoD;;AAE7F,SAAO,MAAP;AACD,CAVM","file":"separatorCommas-compiled.js","sourcesContent":["export const seperatorCommas = (number) => {\r\n  var string = number + \"\"; // 숫자일 경우, 문자로 바꾸기.\r\n\r\n  string = string.replace( /^\\s+|\\s+$|,|[^+-\\.\\d]/g, \"\" ) // ±기호, 소수점, 숫자가 아닌 부분은 지우기.\r\n\r\n  var regExp = /([+-]?\\d+)(\\d{3})(\\.\\d+)?/; // 필요한 정규식.\r\n\r\n  while ( regExp.test( string ) ) string = string.replace( regExp, \"$1\" + \",\" + \"$2\" + \"$3\" ); // 쉼표 삽입.\r\n\r\n  return string;\r\n}"]}