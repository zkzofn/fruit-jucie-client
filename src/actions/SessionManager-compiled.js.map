{"version":3,"sources":["SessionManager.js"],"names":[],"mappings":"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","file":"SessionManager-compiled.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as Crypto from 'crypto-js';\r\nimport axios from 'axios';\r\n\r\nconst singleton = Symbol();\r\nconst singletonEnforcer = Symbol();\r\n\r\nlet secretToken = Crypto.SHA1(\"fRu1t_token_privacy\");\r\nlet secretProfile = Crypto.SHA1(\"fRu1t_profile_privacy\");\r\n\r\n// For production\r\n// const END_POINT = \"13.124.237.236:3000\";\r\n\r\n// For dev-web-server\r\n// const END_POINT = \"http://localhost:3000\";\r\n\r\n// For React dev server\r\nconst END_POINT = \"/api\";\r\n\r\nexport default class SessionManager extends Component {\r\n  customAxios = axios.create();\r\n  header = {};\r\n  user = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.customAxios.defaults.baseURL = END_POINT;\r\n  }\r\n\r\n  static instance() {\r\n    if (!this[singleton])\r\n      this[singleton] = new SessionManager(singletonEnforcer);\r\n\r\n    return this[singleton];\r\n  }\r\n\r\n  setToken(token) {\r\n    this.headers.Authorization = token;\r\n  }\r\n\r\n  setUser(user) {\r\n    this.user = user;\r\n  }\r\n\r\n  login(email, password) {\r\n    return this.customAxios.post(\"/users/authorize\", {\r\n      email: email, password: Crypto.SHA1(password).toString()\r\n    }).then(res => {\r\n      const { sessionKey, user } = res.data;\r\n\r\n      let cryptedToken = Crypto.AES.encrypt(sessionKey, secretToken).toString().split(\"\").reverse().join(\"\");\r\n      let cryptedUser = Crypto.AES.encrypt(JSON.stringify(user), secretProfile).toString().split(\"\").reverse().join(\"\");\r\n\r\n      localStorage.setItem(\"token\", cryptedToken);\r\n      localStorage.setItem(\"user\", cryptedUser);\r\n\r\n      this.setToken(sessionKey);\r\n      this.setUser(user);\r\n\r\n      return new Promise((resolve, reject) => resolve({sessionKey, user}));\r\n    })\r\n  }\r\n\r\n  logout() {\r\n    this.setToken(\"\");\r\n    this.setUser({});\r\n\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  /**\r\n   * localStorage에 저장된 token과 user 정보를 가져옵니다.\r\n   * 만약 decrypt 과정에서 오류가 발생하면 promise가 reject됩니다.\r\n   *\r\n   * @return Promise<{ user: User, sessionKey: string }>\r\n   */\r\n  loadToken() {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let cryptedToken = localStorage.getItem('token').split('').reverse().join('');\r\n        let cryptedUser = localStorage.getItem('user').split('').reverse().join('');\r\n\r\n        let sessionKey = Crypto.AES.decrypt(cryptedToken, secretToken).toString(Crypto.enc.Utf8);\r\n        let user = JSON.parse(Crypto.AES.decrypt(cryptedUser, secretProfile).toString(Crypto.enc.Utf8));\r\n\r\n        this.setToken(sessionKey);\r\n        this.setUser(user);\r\n\r\n        resolve({ sessionKey, user });\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * `token`이 올바른지 검증합니다.\r\n   *\r\n   * @param {string} token\r\n   * @return Promise<User>\r\n   */\r\n  validate() {\r\n    return this.loadToken()\r\n      .then(() => {\r\n        return this.post(\"/users/validation\")\r\n          .then(res => {\r\n            return res.data;\r\n          });\r\n      });\r\n  }\r\n\r\n  get(url, query) {\r\n    const generateQueryString = () => {\r\n      let retVar = \"?\";\r\n\r\n      for (let key in query) {\r\n        let value = query[key];\r\n        retVar += `${key}=${value}&`;\r\n      }\r\n\r\n      return retVar.substring(0, retVar.length - 1);\r\n    };\r\n\r\n    let queryStr = generateQueryString();\r\n\r\n    return this.customAxios({\r\n      method: \"get\",\r\n      url: `${url}${queryStr}`,\r\n      headers: this.headers\r\n    })\r\n  }\r\n\r\n  post(url, data) {\r\n    return this.customAxios({\r\n      method: \"post\",\r\n      url: url,\r\n      headers: this.headers,\r\n      data\r\n    })\r\n  }\r\n\r\n  patch(url, data) {\r\n    return this.customAxios({\r\n      method: \"patch\",\r\n      url: url,\r\n      headers: this.headers,\r\n      data\r\n    })\r\n  }\r\n\r\n  put(url, data) {\r\n    return this.customAxios({\r\n      method: \"put\",\r\n      url: url,\r\n      headers: this.headers,\r\n      data\r\n    })\r\n  }\r\n\r\n  del(url, data) {\r\n    return this.customAxios({\r\n      method: \"delete\",\r\n      url: url,\r\n      headers: this.headers,\r\n      data\r\n    })\r\n  }\r\n}"]}